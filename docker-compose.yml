version: '3.1'

services:
    db:
        image: postgres:16.1
        restart: always
        ports:
            - 5432:5432
        environment:
            POSTGRES_USER: rinha
            POSTGRES_PASSWORD: rinha
        volumes:
            - ./init_clientes.sql:/docker-entrypoint-initdb.d/init_clientes.sql:ro
            # - pg_data:/var/lib/postgresql
        deploy:
            resources:
                limits:
                    # Note que a soma de todos os limites dos serviços
                    # aqui declarados é de 1.5 unidades de CPU e 550MB
                    # de memória. A distribuição feita aqui é apenas
                    # um exemplo – distribua como quiser.
                    cpus: '0.13'
                    memory: '140MB'

    api01: &api
        # TODO publicar image
        image: rinha-local
        build: .
        hostname: api01
        environment:
            - DATABASE_URL=postgres://rinha:rinha@db:5432/rinha

        # Não é necessário expor qualquer porta além da porta do load balancer,
        # mas é comum as pessoas o fazerem para testaremsuas APIs e conectarem
        # ao banco de dados na fase de desenvolvimento.
        ports:
            - '8081:8080'
        depends_on:
            - db
        deploy:
            resources:
                limits:
                    cpus: '0.6'
                    memory: '200MB'

    api02:
        # Essa sintaxe reusa o que foi declarado em 'api01'.
        <<: *api
        hostname: api02
        environment:
            - DATABASE_URL=postgres://rinha:rinha@db:5432/rinha
        ports:
            - '8082:8080'

    nginx:
        image: nginx:latest
        volumes:
            - ./nginx.conf:/etc/nginx/nginx.conf:ro
        depends_on:
            - api01
            - api02
        ports:
            # Obrigatório expor/usar a porta 9999 no load balancer!
            - '9999:9999'
        deploy:
            resources:
                limits:
                    cpus: '0.17'
                    memory: '10MB'

volumes:
    pg_data: {}

# O uso do modo `bridge` deve ser adequado à carga que será usada no teste.
# A edição anterior se beneficiou do modo host pois o volume de requisições
# era relativamente alto e a virtualização da rede se tornou um gargalo, mas
# este modo é mais complexo de ser configurado. Fique à vontade para usar o
# modo que quiser desde que não conflite com portas trivialmente usadas em um
# SO.
networks:
    default:
        driver: bridge
        name: rinha-nginx-2024q1-python
